import React, { useState, useEffect, useRef } from 'react';
import { MessageSquare, History, FileText, Zap, Mic, ThumbsUp, Send } from 'lucide-react';

function App() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('chat');
  const [chatHistory, setChatHistory] = useState([]);
  const [isRecording, setIsRecording] = useState(false);
  const [quickActions, setQuickActions] = useState({
    tags: ['AI', 'Machine Learning', 'NLP', 'Computer Vision', 'Robotics'],
    technologies: ['PyTorch', 'TensorFlow', 'Transformers', 'BERT', 'GPT']
  });
  
  const messagesEndRef = useRef(null);
  
  // Auto-scroll to bottom of messages
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Function to add quick actions to input
  const handleQuickAction = (action) => {
    setInput(prev => prev + ` ${action}`);
  };

  // Mock function to send message to backend
  const sendMessage = async () => {
    if (!input.trim()) return;
    
    const userMessage = { role: 'user', content: input };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    
    try {
      // Simulate API call with timeout
      setTimeout(() => {
        const botResponse = { 
          role: 'assistant', 
          content: `This is a mock response for: "${input}".\nIn a production environment, this would be connected to a backend API that processes your query and returns relevant research information.` 
        };
        setMessages(prev => [...prev, botResponse]);
        
        // Save to history
        const newConversation = {
          id: Date.now(),
          title: input.slice(0, 30) + (input.length > 30 ? '...' : ''),
          timestamp: new Date().toISOString(),
          messages: [...messages, userMessage, botResponse]
        };
        setChatHistory(prev => [newConversation, ...prev]);
        setIsLoading(false);
      }, 1000);
    } catch (error) {
      console.error("Error sending message:", error);
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const startRecording = () => {
    setIsRecording(true);
    // In production: Implement speech recognition
    setTimeout(() => {
      setIsRecording(false);
      setInput(prev => prev + " [Speech converted to text would appear here]");
    }, 2000);
  };

  const stopRecording = () => {
    setIsRecording(false);
  };

  const generateSummary = () => {
    if (messages.length === 0) return "No conversation to summarize.";
    
    // In production: This would call the backend for proper summarization
    return "This is a placeholder for the conversation summary. In production, this would be generated by the backend using AI to analyze the key points from your research conversation.";
  };

  const loadConversation = (conversation) => {
    setMessages(conversation.messages);
    setActiveTab('chat');
  };

  // Add welcome message when app loads
  useEffect(() => {
    if (messages.length === 0) {
      setMessages([{
        role: 'assistant',
        content: 'Welcome to the GenAI Research Assistant! How can I help with your research today?'
      }]);
    }
  }, []);

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className="w-16 bg-gray-800 flex flex-col items-center py-4">
        <SidebarIcon icon={<MessageSquare />} active={activeTab === 'chat'} onClick={() => setActiveTab('chat')} tooltip="Chat" />
        <SidebarIcon icon={<History />} active={activeTab === 'history'} onClick={() => setActiveTab('history')} tooltip="History" />
        <SidebarIcon icon={<FileText />} active={activeTab === 'summary'} onClick={() => setActiveTab('summary')} tooltip="Summary" />
        <SidebarIcon icon={<Zap />} active={activeTab === 'actions'} onClick={() => setActiveTab('actions')} tooltip="Quick Actions" />
        <SidebarIcon icon={<ThumbsUp />} active={activeTab === 'recommendations'} onClick={() => setActiveTab('recommendations')} tooltip="Recommendations" />
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <header className="bg-white shadow p-4">
          <h1 className="text-xl font-bold text-gray-800">GenAI Research Assistant</h1>
        </header>

        {/* Content Area */}
        <main className="flex-1 overflow-hidden">
          {activeTab === 'chat' && (
            <div className="flex flex-col h-full">
              <div className="flex-1 overflow-y-auto p-4">
                {messages.map((msg, index) => (
                  <div 
                    key={index} 
                    className={`mb-4 p-3 rounded-lg ${
                      msg.role === 'user' ? 'bg-blue-100 ml-auto' : 'bg-gray-100'
                    } max-w-md`}
                  >
                    {msg.content.split('\n').map((line, i) => (
                      <p key={i} className={i > 0 ? 'mt-2' : ''}>{line}</p>
                    ))}
                  </div>
                ))}
                {isLoading && (
                  <div className="mb-4 p-3 rounded-lg bg-gray-100 max-w-md">
                    <div className="flex space-x-2">
                      <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-100"></div>
                      <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-200"></div>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </div>
              <div className="p-4 border-t bg-white">
                <div className="flex">
                  <textarea 
                    value={input} 
                    onChange={(e) => setInput(e.target.value)} 
                    onKeyPress={handleKeyPress}
                    className="flex-1 border rounded-l-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ask me anything about research papers..."
                    rows="2"
                  />
                  <button 
                    onClick={isRecording ? stopRecording : startRecording}
                    className={`px-4 py-2 ${isRecording ? 'bg-red-500 text-white' : 'bg-gray-200'} hover:bg-opacity-80`}
                    title={isRecording ? "Stop recording" : "Start voice input"}
                  >
                    <Mic size={20} />
                  </button>
                  <button 
                    onClick={sendMessage} 
                    disabled={isLoading || !input.trim()}
                    className="bg-blue-500 text-white px-4 py-2 rounded-r-lg hover:bg-blue-600 disabled:bg-blue-300 flex items-center justify-center"
                  >
                    <Send size={20} />
                  </button>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'history' && (
            <div className="p-4 overflow-y-auto h-full">
              <h2 className="text-lg font-semibold mb-4">Conversation History</h2>
              {chatHistory.length === 0 ? (
                <p className="text-gray-500">No history yet. Start a conversation!</p>
              ) : (
                <div className="space-y-2">
                  {chatHistory.map(conv => (
                    <div 
                      key={conv.id} 
                      className="p-3 bg-white rounded-lg shadow hover:bg-gray-50 cursor-pointer"
                      onClick={() => loadConversation(conv)}
                    >
                      <p className="font-medium">{conv.title}</p>
                      <p className="text-sm text-gray-500">
                        {new Date(conv.timestamp).toLocaleString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'summary' && (
            <div className="p-4 overflow-y-auto h-full">
              <h2 className="text-lg font-semibold mb-4">Conversation Summary</h2>
              <div className="bg-white p-4 rounded-lg shadow">
                <p>{generateSummary()}</p>
              </div>
              {messages.length > 0 && (
                <div className="mt-4 bg-white p-4 rounded-lg shadow">
                  <h3 className="font-medium mb-2">Key Topics</h3>
                  <div className="flex flex-wrap">
                    {["Research", "AI Models", "Data Analysis"].map((topic) => (
                      <span key={topic} className="bg-blue-100 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">
                        {topic}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 'actions' && (
            <div className="p-4 overflow-y-auto h-full">
              <h2 className="text-lg font-semibold mb-4">Quick Actions</h2>
              
              <div className="mb-6">
                <h3 className="font-medium mb-2">Latest Research</h3>
                <button 
                  onClick={() => handleQuickAction("Find latest AI research")}
                  className="bg-blue-100 hover:bg-blue-200 text-blue-800 font-medium py-1 px-3 rounded-full text-sm mr-2 mb-2"
                >
                  Latest AI Research
                </button>
                <button 
                  onClick={() => handleQuickAction("Find papers published this week")}
                  className="bg-blue-100 hover:bg-blue-200 text-blue-800 font-medium py-1 px-3 rounded-full text-sm mr-2 mb-2"
                >
                  This Week's Papers
                </button>
                <button 
                  onClick={() => handleQuickAction("Trending research topics in 2025")}
                  className="bg-blue-100 hover:bg-blue-200 text-blue-800 font-medium py-1 px-3 rounded-full text-sm mr-2 mb-2"
                >
                  Trending Topics
                </button>
              </div>
              
              <div className="mb-6">
                <h3 className="font-medium mb-2">Tags</h3>
                <div className="flex flex-wrap">
                  {quickActions.tags.map(tag => (
                    <button 
                      key={tag} 
                      onClick={() => handleQuickAction(tag)}
                      className="bg-green-100 hover:bg-green-200 text-green-800 font-medium py-1 px-3 rounded-full text-sm mr-2 mb-2"
                    >
                      {tag}
                    </button>
                  ))}
                </div>
              </div>
              
              <div className="mb-6">
                <h3 className="font-medium mb-2">Technologies</h3>
                <div className="flex flex-wrap">
                  {quickActions.technologies.map(tech => (
                    <button 
                      key={tech} 
                      onClick={() => handleQuickAction(tech)}
                      className="bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-1 px-3 rounded-full text-sm mr-2 mb-2"
                    >
                      {tech}
                    </button>
                  ))}
                </div>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Prompt Templates</h3>
                <button 
                  onClick={() => handleQuickAction("Summarize the following paper: ")}
                  className="bg-yellow-100 hover:bg-yellow-200 text-yellow-800 font-medium py-1 px-3 rounded-full text-sm mr-2 mb-2"
                >
                  Paper Summary
                </button>
                <button 
                  onClick={() => handleQuickAction("Compare these research methods: ")}
                  className="bg-yellow-100 hover:bg-yellow-200 text-yellow-800 font-medium py-1 px-3 rounded-full text-sm mr-2 mb-2"
                >
                  Compare Methods
                </button>
                <button 
                  onClick={() => handleQuickAction("Explain this concept in simple terms: ")}
                  className="bg-yellow-100 hover:bg-yellow-200 text-yellow-800 font-medium py-1 px-3 rounded-full text-sm mr-2 mb-2"
                >
                  Simplify Concept
                </button>
                <button 
                  onClick={() => handleQuickAction("Generate a research question about: ")}
                  className="bg-yellow-100 hover:bg-yellow-200 text-yellow-800 font-medium py-1 px-3 rounded-full text-sm mr-2 mb-2"
                >
                  Research Question
                </button>
              </div>
            </div>
          )}

          {activeTab === 'recommendations' && (
            <div className="p-4 overflow-y-auto h-full">
              <h2 className="text-lg font-semibold mb-4">Recommendations</h2>
              <p className="text-gray-500 mb-4">Based on your conversations, you might be interested in:</p>
              
              <div className="space-y-4">
                <div className="bg-white p-4 rounded-lg shadow">
                  <h3 className="font-medium">Attention Is All You Need</h3>
                  <p className="text-sm text-gray-500">Vaswani et al. (2017)</p>
                  <p className="text-sm mt-2">The paper that introduced the Transformer architecture.</p>
                  <button 
                    className="mt-2 text-blue-500 text-sm font-medium"
                    onClick={() => handleQuickAction("Tell me about the Transformer architecture")}
                  >
                    Learn More
                  </button>
                </div>
                
                <div className="bg-white p-4 rounded-lg shadow">
                  <h3 className="font-medium">BERT: Pre-training of Deep Bidirectional Transformers</h3>
                  <p className="text-sm text-gray-500">Devlin et al. (2018)</p>
                  <p className="text-sm mt-2">A landmark paper in NLP that introduced BERT.</p>
                  <button 
                    className="mt-2 text-blue-500 text-sm font-medium"
                    onClick={() => handleQuickAction("Explain BERT")}
                  >
                    Learn More
                  </button>
                </div>
                
                <div className="bg-white p-4 rounded-lg shadow">
                  <h3 className="font-medium">Language Models are Few-Shot Learners</h3>
                  <p className="text-sm text-gray-500">Brown et al. (2020)</p>
                  <p className="text-sm mt-2">Introduced GPT-3 and demonstrated few-shot learning capabilities.</p>
                  <button 
                    className="mt-2 text-blue-500 text-sm font-medium"
                    onClick={() => handleQuickAction("Explain few-shot learning in large language models")}
                  >
                    Learn More
                  </button>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
}

// Sidebar Icon Component
function SidebarIcon({ icon, active, onClick, tooltip }) {
  return (
    <div className="relative group">
      <button 
        className={`w-10 h-10 flex items-center justify-center rounded-lg mb-4 ${
          active ? 'bg-blue-500 text-white' : 'text-gray-400 hover:bg-gray-700 hover:text-white'
        }`}
        onClick={onClick}
      >
        {icon}
      </button>
      {tooltip && (
        <div className="absolute left-full ml-2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10">
          {tooltip}
        </div>
      )}
    </div>
  );
}

export default App;